{"ast":null,"code":"var __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) {\n      ar.push(r.value);\n    }\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nimport { useState, useRef } from 'react';\nimport useIsomorphicLayoutEffect from 'use-isomorphic-layout-effect';\nimport useConstant from './useConstant';\nexport function isActorWithState(actorRef) {\n  return 'state' in actorRef;\n}\n\nfunction isDeferredActor(actorRef) {\n  return 'deferred' in actorRef;\n}\n\nvar noop = function noop() {\n  /* ... */\n};\n\nfunction defaultGetSnapshot(actorRef) {\n  return isActorWithState(actorRef) ? actorRef.state : 'getSnapshot' in actorRef ? actorRef.getSnapshot() : undefined;\n}\n\nexport function useActor(actorRef, getSnapshot) {\n  if (getSnapshot === void 0) {\n    getSnapshot = defaultGetSnapshot;\n  }\n\n  var actorRefRef = useRef(actorRef);\n  var deferredEventsRef = useRef([]);\n\n  var _a = __read(useState(function () {\n    return getSnapshot(actorRef);\n  }), 2),\n      current = _a[0],\n      setCurrent = _a[1];\n\n  var send = useConstant(function () {\n    return function (event) {\n      var currentActorRef = actorRefRef.current; // If the previous actor is a deferred actor,\n      // queue the events so that they can be replayed\n      // on the non-deferred actor.\n\n      if (isDeferredActor(currentActorRef) && currentActorRef.deferred) {\n        deferredEventsRef.current.push(event);\n      } else {\n        currentActorRef.send(event);\n      }\n    };\n  });\n  useIsomorphicLayoutEffect(function () {\n    actorRefRef.current = actorRef;\n    setCurrent(getSnapshot(actorRef));\n    var subscription = actorRef.subscribe({\n      next: function next(emitted) {\n        return setCurrent(emitted);\n      },\n      error: noop,\n      complete: noop\n    }); // Dequeue deferred events from the previous deferred actorRef\n\n    while (deferredEventsRef.current.length > 0) {\n      var deferredEvent = deferredEventsRef.current.shift();\n      actorRef.send(deferredEvent);\n    }\n\n    return function () {\n      subscription.unsubscribe();\n    };\n  }, [actorRef]);\n  return [current, send];\n}","map":{"version":3,"sources":["/Users/trent/Sites/2021/landlines_map/node_modules/@xstate/react/es/useActor.js"],"names":["__read","o","n","m","Symbol","iterator","i","call","r","ar","e","next","done","push","value","error","useState","useRef","useIsomorphicLayoutEffect","useConstant","isActorWithState","actorRef","isDeferredActor","noop","defaultGetSnapshot","state","getSnapshot","undefined","useActor","actorRefRef","deferredEventsRef","_a","current","setCurrent","send","event","currentActorRef","deferred","subscription","subscribe","emitted","complete","length","deferredEvent","shift","unsubscribe"],"mappings":"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","sourcesContent":["var __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nimport { useState, useRef } from 'react';\nimport useIsomorphicLayoutEffect from 'use-isomorphic-layout-effect';\nimport useConstant from './useConstant';\nexport function isActorWithState(actorRef) {\n    return 'state' in actorRef;\n}\nfunction isDeferredActor(actorRef) {\n    return 'deferred' in actorRef;\n}\nvar noop = function () {\n    /* ... */\n};\nfunction defaultGetSnapshot(actorRef) {\n    return isActorWithState(actorRef)\n        ? actorRef.state\n        : 'getSnapshot' in actorRef\n            ? actorRef.getSnapshot()\n            : undefined;\n}\nexport function useActor(actorRef, getSnapshot) {\n    if (getSnapshot === void 0) { getSnapshot = defaultGetSnapshot; }\n    var actorRefRef = useRef(actorRef);\n    var deferredEventsRef = useRef([]);\n    var _a = __read(useState(function () { return getSnapshot(actorRef); }), 2), current = _a[0], setCurrent = _a[1];\n    var send = useConstant(function () { return function (event) {\n        var currentActorRef = actorRefRef.current;\n        // If the previous actor is a deferred actor,\n        // queue the events so that they can be replayed\n        // on the non-deferred actor.\n        if (isDeferredActor(currentActorRef) && currentActorRef.deferred) {\n            deferredEventsRef.current.push(event);\n        }\n        else {\n            currentActorRef.send(event);\n        }\n    }; });\n    useIsomorphicLayoutEffect(function () {\n        actorRefRef.current = actorRef;\n        setCurrent(getSnapshot(actorRef));\n        var subscription = actorRef.subscribe({\n            next: function (emitted) { return setCurrent(emitted); },\n            error: noop,\n            complete: noop\n        });\n        // Dequeue deferred events from the previous deferred actorRef\n        while (deferredEventsRef.current.length > 0) {\n            var deferredEvent = deferredEventsRef.current.shift();\n            actorRef.send(deferredEvent);\n        }\n        return function () {\n            subscription.unsubscribe();\n        };\n    }, [actorRef]);\n    return [current, send];\n}\n"]},"metadata":{},"sourceType":"module"}